{"version":3,"sources":["context/FavoritesContext/types/favorites-action.ts","atomic-design/organisms/SearchForm/SearchForm.tsx","remotes/giphy/giphy.ts","atomic-design/molecules/GiphyImage/GiphyImage.tsx","atomic-design/organisms/Gallery/Gallery.tsx","atomic-design/atoms/Warning/Warning.tsx","context/FavoritesContext/favorites-storage.ts","context/FavoritesContext/favorites-reducer.ts","context/FavoritesContext/FavoritesContext.tsx","atomic-design/organisms/Header/Header.tsx","atomic-design/pages/PageSearch/PageSearch.tsx","atomic-design/pages/PageFavorites/PageFavorites.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["FavoritesAction","SearchForm","onSubmit","className","useState","search","setSearch","onChangeSearch","useCallback","e","target","value","emitSubmit","preventDefault","Form","Stack","direction","gap","Label","Control","type","placeholder","onChange","Button","variant","searchGifs","a","fetch","res","json","data","map","id","title","images","fixed_width","width","height","url","webp","urlFallback","GiphyImage","gif","onClickFavorite","isFavorite","favorite","setFavorite","clickFavorite","wrapperStyle","useMemo","favoriteClassName","style","srcSet","src","alt","onClick","Gallery","items","classes","printGifs","length","Warning","text","printError","Alert","FAVORITES_KEY","saveFavorites","state","localStorage","setItem","JSON","stringify","ids","favoritesReducer","payload","Add","Error","newState","list","Set","add","Remove","delete","filter","remove","initialState","valueRaw","getItem","parse","getDefaultFavorites","FavoritesContext","createContext","FavoritesContextProvider","children","reducer","useReducer","Provider","Header","location","useLocation","getLinkStatus","pathname","includes","to","PageSearch","useContext","favorites","favoritesDispatch","error","setError","gallery","setGallery","getInitData","undefined","has","useEffect","Container","Row","Col","lg","span","offset","PageFavorites","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.044cacbb.chunk.js","sourcesContent":["export enum FavoritesAction {\n  Add = 'FAVORITES_ADD',\n  Remove = 'FAVORITES_REMOVE',\n}\n","import React, { ChangeEvent, FormEvent, useCallback, useState } from 'react';\nimport { Button, Form, Stack } from 'react-bootstrap';\nimport { FaSearch } from 'react-icons/all';\nimport './SearchForm.scss';\n\ninterface IProps {\n  onSubmit: (search?: string) => void;\n  className?: string;\n}\n\nconst SearchForm = ({ onSubmit, className }: IProps) => {\n  const [search, setSearch] = useState<string>();\n\n  const onChangeSearch = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const emitSubmit = useCallback(\n    (e: FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      onSubmit(search);\n    },\n    [search],\n  );\n\n  return (\n    <Form onSubmit={emitSubmit} className={className}>\n      <Stack direction=\"horizontal\" gap={3}>\n        <Form.Label className=\"visually-hidden\">Search</Form.Label>\n        <Form.Control\n          type=\"text\"\n          placeholder=\"Search all the GIFs!!!\"\n          onChange={onChangeSearch}\n        />\n\n        <Button className=\"search-form__button\" variant=\"info\" type=\"submit\">\n          <FaSearch className=\"search-form__icon\" />\n          <span className=\"visually-hidden\">Search</span>\n        </Button>\n      </Stack>\n    </Form>\n  );\n};\n\nexport default SearchForm;\n","import { IGifSearchResponse } from './i-gif-search-response';\nimport { IGif } from './i-gif';\n\nconst API_KEY = 'Q1vGNiVWAfI7M449E1yS1ZVKN0pDWjFK';\n\nexport const searchGifs = async (search?: string): Promise<IGif[]> => {\n  const res = await fetch(\n    `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${search}`,\n  );\n  const { data }: IGifSearchResponse = await res.json();\n\n  return data.map(({ id, title, images }) => {\n    const { width, height, webp, url } = images.fixed_width;\n    return { id, width, height, url: webp, title, urlFallback: url };\n  });\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { FaHeart } from 'react-icons/all';\nimport { IGif } from '../../../remotes/giphy/i-gif';\nimport './GiphyImage.scss';\n\ninterface IProps {\n  gif: IGif;\n  onClickFavorite: (gif: IGif, favorite: boolean) => void;\n  isFavorite: boolean;\n}\n\nconst GiphyImage = ({ gif, onClickFavorite, isFavorite }: IProps) => {\n  const [favorite, setFavorite] = useState(isFavorite);\n\n  const clickFavorite = useCallback(() => {\n    onClickFavorite(gif, !favorite);\n    setFavorite(!favorite);\n  }, [favorite, gif, onClickFavorite]);\n\n  const wrapperStyle = useMemo(() => {\n    const { width, height } = gif;\n\n    return {\n      width: `${width}px`,\n      height: `${height}px`,\n    };\n  }, [gif]);\n\n  const favoriteClassName = useMemo(() => {\n    let className = 'giphy-image__favorite';\n    if (favorite) className += ' giphy-image__favorite--active';\n\n    return className;\n  }, [favorite]);\n\n  return (\n    <div data-testid=\"giphy-image\" className=\"giphy-image\" style={wrapperStyle}>\n      <picture>\n        <source srcSet={gif.url} type=\"image/webp\" />\n        <source srcSet={gif.urlFallback} type=\"image/jpeg\" />\n        <img\n          data-testid=\"giphy-image__gif\"\n          src={gif.url}\n          alt={gif.title}\n          width={gif.width}\n          height={gif.height}\n        />\n      </picture>\n\n      <button\n        data-testid=\"giphy-image__favorite\"\n        type=\"button\"\n        onClick={clickFavorite}\n        className={favoriteClassName}\n      >\n        <FaHeart />\n      </button>\n    </div>\n  );\n};\n\nexport default GiphyImage;\n","import React, { useCallback, useMemo } from 'react';\nimport { IGif } from '../../../remotes/giphy/i-gif';\nimport './Gallery.scss';\nimport GiphyImage from '../../molecules/GiphyImage/GiphyImage';\n\nexport interface IGalleryItem {\n  data: IGif;\n  isFavorite: boolean;\n}\n\ninterface IProps {\n  className?: string;\n  onClickFavorite: (gif: IGif, favorite: boolean) => void;\n  items: IGalleryItem[];\n}\n\nconst Gallery = ({ items, className, onClickFavorite }: IProps) => {\n  const classes = useMemo(() => `gallery ${className}`, [className]);\n\n  const printGifs = useCallback(() => {\n    if (items.length === 0)\n      return (\n        <p className=\"text-center\">\n          No gifs added yet. Go back to the search page and add some.\n        </p>\n      );\n\n    return (\n      <div className=\"gallery__grid\">\n        {items.map(({ data, isFavorite }) => (\n          <GiphyImage\n            key={data.id}\n            gif={data}\n            onClickFavorite={onClickFavorite}\n            isFavorite={isFavorite}\n          />\n        ))}\n      </div>\n    );\n  }, [items, onClickFavorite]);\n\n  return <div className={classes}>{printGifs()}</div>;\n};\n\nexport default Gallery;\n","import React, { useCallback } from 'react';\nimport { Alert } from 'react-bootstrap';\n\ninterface IProps {\n  text?: string;\n}\n\nconst Warning = ({ text }: IProps) => {\n  const printError = useCallback(() => {\n    if (text) {\n      return <Alert variant=\"warning\">{text}</Alert>;\n    }\n\n    return null;\n  }, [text]);\n\n  return <>{printError()}</>;\n};\n\nexport default Warning;\n","import { IFavoritesState } from './types/i-favorites-state';\n\nconst FAVORITES_KEY = 'GIPHY:FAVORITES';\n\nexport const getDefaultFavorites = (): IFavoritesState => {\n  const valueRaw = localStorage.getItem(FAVORITES_KEY);\n  if (valueRaw) {\n    const state = JSON.parse(valueRaw);\n    state.ids = new Set<string>(state.ids);\n    return state;\n  }\n\n  return {\n    list: [],\n    ids: new Set(),\n  };\n};\n\nexport const saveFavorites = (state: IFavoritesState) => {\n  localStorage.setItem(\n    FAVORITES_KEY,\n    JSON.stringify({\n      ...state,\n      ids: [...state.ids],\n    }),\n  );\n};\n","import { IGif } from '../../remotes/giphy/i-gif';\nimport { FavoritesAction } from './types/favorites-action';\nimport { saveFavorites } from './favorites-storage';\nimport { IFavoritesState } from './types/i-favorites-state';\nimport { IFavoritesAction } from './types/i-favorites-action';\n\nconst add = (gif: IGif, state: IFavoritesState): IFavoritesState => {\n  const newState = {\n    ...state,\n    list: [gif, ...state.list],\n    ids: new Set([...state.ids, gif.id]),\n  };\n\n  saveFavorites(newState);\n  return newState;\n};\n\nconst remove = (id: string, state: IFavoritesState) => {\n  const ids = new Set([...state.ids]);\n  ids.delete(id);\n\n  const newState = {\n    ...state,\n    list: state.list.filter((gif) => gif.id !== id),\n    ids,\n  };\n\n  saveFavorites(newState);\n  return newState;\n};\n\nexport const favoritesReducer = (\n  state: IFavoritesState,\n  { type, payload }: IFavoritesAction,\n) => {\n  switch (type) {\n    case FavoritesAction.Add:\n      if (typeof payload === 'string') throw new Error('Invalid IGif type');\n      return add(payload, state);\n    case FavoritesAction.Remove:\n      if (typeof payload !== 'string') throw new Error('Invalid ID type');\n      return remove(payload, state);\n    default:\n      throw new Error(`Reducer Action: ${type}. Does not exist`);\n  }\n};\n","import React, { createContext, useReducer } from 'react';\nimport { favoritesReducer } from './favorites-reducer';\nimport { getDefaultFavorites } from './favorites-storage';\nimport { IFavoritesState } from './types/i-favorites-state';\nimport { IFavoritesAction } from './types/i-favorites-action';\n\nconst initialState = getDefaultFavorites();\n\nexport const FavoritesContext = createContext<\n  [IFavoritesState, React.Dispatch<IFavoritesAction>]\n>([initialState, () => null]);\n\nexport const FavoritesContextProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const reducer = useReducer(favoritesReducer, initialState);\n\n  return (\n    <FavoritesContext.Provider value={reducer}>\n      {children}\n    </FavoritesContext.Provider>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { Link, useLocation } from 'react-router-dom';\nimport './Header.scss';\n\nconst Header = () => {\n  const location = useLocation();\n\n  const getLinkStatus = useCallback((isFavorite: boolean) => {\n    const match = location.pathname.includes('favorites');\n\n    if (match === isFavorite) return 'primary';\n    return 'secondary';\n  }, []);\n\n  return (\n    <div>\n      <ul className=\"header__nav list-unstyled mt-3\">\n        <li className=\"header__nav-item\">\n          <Link to=\"/\">\n            <Button variant={getLinkStatus(false)}>Search</Button>\n          </Link>\n        </li>\n\n        <li className=\"header__nav-item\">\n          <Link to=\"/favorites\">\n            <Button variant={getLinkStatus(true)}>Favorites</Button>\n          </Link>\n        </li>\n      </ul>\n\n      <h1 className=\"mt-3 text-center\">\n        GIPHY Example App\n        <img\n          className=\"d-inline-block ms-2\"\n          width=\"100\"\n          height=\"27\"\n          alt=\"Giphy attribution\"\n          src=\"/giphy-logo.png\"\n        />\n      </h1>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport SearchForm from '../../organisms/SearchForm/SearchForm';\nimport { searchGifs } from '../../../remotes/giphy/giphy';\nimport Gallery, { IGalleryItem } from '../../organisms/Gallery/Gallery';\nimport Warning from '../../atoms/Warning/Warning';\nimport { FavoritesContext } from '../../../context/FavoritesContext/FavoritesContext';\nimport { IGif } from '../../../remotes/giphy/i-gif';\nimport { FavoritesAction } from '../../../context/FavoritesContext/types/favorites-action';\nimport Header from '../../organisms/Header/Header';\n\nconst DEFAULT_SEARCH = 'marvel';\n\nconst PageSearch = () => {\n  const [favorites, favoritesDispatch] = useContext(FavoritesContext);\n  const [error, setError] = useState<string | undefined>();\n  const [gallery, setGallery] = useState<IGalleryItem[]>([]);\n\n  const search = useCallback((text?: string) => {\n    const getInitData = async () => {\n      setError(undefined);\n\n      try {\n        const res = await searchGifs(text);\n        const data = res.map((gif) => ({\n          data: gif,\n          isFavorite: favorites.ids.has(gif.id),\n        }));\n\n        setGallery(data);\n      } catch (e) {\n        setError('There was an error, please try searching again');\n      }\n    };\n\n    getInitData();\n  }, []);\n\n  const onClickFavorite = useCallback((gif: IGif, isFavorite: boolean) => {\n    if (isFavorite) {\n      favoritesDispatch({\n        type: FavoritesAction.Add,\n        payload: gif,\n      });\n\n      return;\n    }\n\n    favoritesDispatch({\n      type: FavoritesAction.Remove,\n      payload: gif.id,\n    });\n  }, []);\n\n  useEffect(() => {\n    search(DEFAULT_SEARCH);\n  }, [search]);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Header />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={{ span: 6, offset: 3 }}>\n          <SearchForm className=\"mb-3\" onSubmit={search} />\n          <Warning text={error} />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Gallery\n            onClickFavorite={onClickFavorite}\n            className=\"mt-4\"\n            items={gallery}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PageSearch;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport Gallery, { IGalleryItem } from '../../organisms/Gallery/Gallery';\nimport { FavoritesContext } from '../../../context/FavoritesContext/FavoritesContext';\nimport { IGif } from '../../../remotes/giphy/i-gif';\nimport { FavoritesAction } from '../../../context/FavoritesContext/types/favorites-action';\nimport Header from '../../organisms/Header/Header';\n\nconst PageFavorites = () => {\n  const [favorites, favoritesDispatch] = useContext(FavoritesContext);\n  const [gallery, setGallery] = useState<IGalleryItem[]>([]);\n\n  useEffect(() => {\n    const data = favorites.list.map((gif) => ({\n      data: gif,\n      isFavorite: favorites.ids.has(gif.id),\n    }));\n\n    setGallery(data);\n  }, []);\n\n  const onClickFavorite = useCallback((gif: IGif, isFavorite: boolean) => {\n    if (isFavorite) {\n      favoritesDispatch({\n        type: FavoritesAction.Add,\n        payload: gif,\n      });\n\n      return;\n    }\n\n    favoritesDispatch({\n      type: FavoritesAction.Remove,\n      payload: gif.id,\n    });\n  }, []);\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <Header />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Gallery\n            onClickFavorite={onClickFavorite}\n            className=\"mt-4\"\n            items={gallery}\n          />\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default PageFavorites;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport PageSearch from './atomic-design/pages/PageSearch/PageSearch';\nimport { FavoritesContextProvider } from './context/FavoritesContext/FavoritesContext';\nimport PageFavorites from './atomic-design/pages/PageFavorites/PageFavorites';\n\nconst App = () => (\n  <FavoritesContextProvider>\n    <HashRouter>\n      <Switch>\n        <Route path=\"/favorites\">\n          <PageFavorites />\n        </Route>\n\n        <Route path=\"/\">\n          <PageSearch />\n        </Route>\n      </Switch>\n    </HashRouter>\n  </FavoritesContextProvider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/global.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}